#include <Wire.h>
#include <Servo.h>

/////////////////////// Inputs/outputs ///////////////////////
int Analog_in = A0;
Servo myservo;  // Create servo object to control a servo, later attached to D9
//////////////////////////////////////////////////////////////

//////////////////////// Variables ///////////////////////////
int Read = 0;
float distance = 0.0;
float elapsedTime, time, timePrev;  // Variables for time control
float distance_previous_error, distance_error;
int period = 50;  // Refresh rate period of the loop is 50ms
//////////////////////////////////////////////////////////////

/////////////////// PID constants /////////////////////////////
float kp = 8;          // Mine was 8
float ki = 0.2;        // Mine was 0.2
float kd = 3100;       // Mine was 3100
float distance_setpoint = 21;  // Should be the distance from sensor to the middle of the bar in mm
float PID_p, PID_i, PID_d, PID_total;
//////////////////////////////////////////////////////////////

void setup() {
  Serial.begin(9600);
  myservo.attach(9);  // Attaches the servo on pin 9 to the servo object
  myservo.write(125); // Put the servo at angle 125, so the balance is in the middle
  pinMode(Analog_in, INPUT);
  time = millis();
}

void loop() {
  if (millis() > time + period) {
    time = millis();
    distance = get_dist(100);  // Get distance from the sensor
    distance_error = distance_setpoint - distance;
    
    // Calculate PID components
    PID_p = kp * distance_error;
    float dist_difference = distance_error - distance_previous_error;
    PID_d = kd * (dist_difference / period);
    
    if (-3 < distance_error && distance_error < 3) {
      PID_i = PID_i + (ki * distance_error); // Accumulate integral only when within the error range
    } else {
      PID_i = 0; // Reset integral when error exceeds the threshold
    }
  
    PID_total = PID_p + PID_i + PID_d;
    PID_total = map(PID_total, -150, 150, 0, 150);
    
    // Limit the PID output to within the servo's range
    if (PID_total < 20) {
      PID_total = 20;
    }
    if (PID_total > 160) {
      PID_total = 160;
    }
  
    // Move the servo to the calculated position
    myservo.write(PID_total + 30);
    distance_previous_error = distance_error; // Update previous error for next iteration
  }
}

float get_dist(int n) {
  long sum = 0;
  for (int i = 0; i < n; i++) {
    sum = sum + analogRead(Analog_in);
  }
  float adc = sum / n;
  
  // Calculate distance using the sensor's formula
  float distance_cm = 17569.7 * pow(adc, -1.2062);
  return distance_cm;
}
